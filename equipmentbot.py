#from multiprocessing import Value
import telebot
import get_equipment
from config import TOKEN

# –µ—â–µ –ø—Ä–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –Ω–∞ https://github.com/eternnoir/pyTelegramBotAPI/blob/master/examples/custom_states.py

chat_states: dict = {}
""" –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è 
    dict[chat_id]:(equipment_id, newlist [(shortfilename, fullfilename), ])
"""
blocked_chats = {-1001539497277}

bot = telebot.TeleBot(TOKEN)

def is_int(str) -> bool:
    try:
        int(str)
        return True
    except ValueError:
        return False

def is_blocked_chat(chat_id: int) -> bool:
    """ –µ—Å–ª–∏ —á–∞—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, —Ç–æ –≤—ã—Ö–æ–¥–∏–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è"""
    return chat_id in blocked_chats

@bot.message_handler(commands=["start"])
def start(m, res=False) -> None:
    if is_blocked_chat(m.chat.id) : return
    first_name = m.from_user.first_name 
    last_name = m.from_user.last_name
    print(f"–ù–∞—á–∏–Ω–∞–µ–º —á–∞—Ç —Å {m.chat.id=} {first_name=} {last_name=}")
    # m.from_user.first_name id last_name username
    bot.send_message(m.chat.id, f'üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {m.from_user.username}.')    
    handle_text_default(m)

@bot.message_handler(commands=["id"])
def handler_id(m, res=False):
    if is_blocked_chat(m.chat.id) : return
    bot.send_message(m.chat.id, f'–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—Ä—É–¥–æ–≤–∞–Ω–∏—è')    
    bot.register_next_step_handler(m, equipment_inputid_handler)    

@bot.message_handler(commands=["room"])
def handler_room(m, res=False):
    if is_blocked_chat(m.chat.id) : return
    bot.send_message(m.chat.id, f'–î–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–Ω–æ–π')    
    bot.register_next_step_handler(m, room_inputroom_handler)

@bot.message_handler(commands=["docs"])
def handler_docs(m, res=False):
    if is_blocked_chat(m.chat.id) : return
    bot.send_message(m.chat.id, f'–î–ª—è –≤—ã–≤–æ–¥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è')    
    bot.register_next_step_handler(m, docs_inputid_handler)

@bot.message_handler(commands=["file"])
def handler_file(m, res=False):
    if is_blocked_chat(m.chat.id) : return
    #docs_inputid_handler(m)    
    bot.send_message(m.chat.id, '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è')
    bot.register_next_step_handler(m, docs_inputid_handler)

@bot.message_handler(commands=["t", "test"])
def handler_test(m, res=False):
    if is_blocked_chat(m.chat.id) : return
    markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)
    btn0 = telebot.types.KeyboardButton('/id')
    btn1 = telebot.types.KeyboardButton('/room')
    btn2 = telebot.types.KeyboardButton('/docs')
    btn3 = telebot.types.KeyboardButton('/file')
    btncancel = telebot.types.KeyboardButton('/cancel')
    markup.add(btn0, btn1, btn2, btn3, btncancel)
    msg = bot.send_message(m.chat.id, '–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —ç—Ç–æ—Ç —á–∞—Ç. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ—è–≤–∏–≤—à–µ–π—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è', reply_markup=markup)
    # bot.register_next_step_handler(msg.msg, handler_switch)


def is_canceled(m) -> bool:
    """ –≤ —Ç–µ–∫—Å—Ç–µ –ø—Ä–∏—à–ª–æ '/cancel' –Ω—É–∂–Ω–æ –æ—Ç–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ """
    text = m.text
    return "/cancel" in text

@bot.message_handler(commands=["cancel"])
def handler_cancel(m, res=False):
    if is_blocked_chat(m.chat.id) : return
    # markup = telebot.types.ReplyKeyboardRemove(selective=False)    
    bot.send_message(m.chat.id, '—Ç–µ–∫—É—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞')
    handle_text_default(m)
    

# def send_buttons_step0(m):
#     menu1 = telebot.types.InlineKeyboardMarkup()
#     menu1.add(telebot.types.InlineKeyboardButton(text = '‚Ññ –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–Ω–æ–π', callback_data ='room'))
#     menu1.add(telebot.types.InlineKeyboardButton(text = '–ö–∞—Ä—Ç–æ—á–∫–∞', callback_data ='id'))
#     menu1.add(telebot.types.InlineKeyboardButton(text = '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è', callback_data ='docs'))
#     msg = bot.send_message(m.chat.id, text ='–í—ã–±–µ—Ä–∏ —Ç–∏–ø –ø–æ–∏—Å–∫–∞: —Å–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –ø–æ –Ω–æ–º–µ—Ä—É –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–Ω–æ–π, –∫–∞—Ä—Ç–æ—á–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –ø–æ –Ω–æ–º–µ—Ä—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –Ω–æ–º–µ—Ä—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è', reply_markup = menu1)

# @bot.callback_query_handler(func=lambda call: True)
# def sendbuttons(call):
#     if call.data == 'room':
#         msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–Ω–æ–π")
#         bot.register_next_step_handler(msg, process_room_step)
#     elif call.data == 'id':
#         msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è")
#         bot.register_next_step_handler(msg, process_equipment_step)
#     elif call.data == 'docs':
#         msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è - –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
#         bot.register_next_step_handler(msg, docs_handler)
#     else:
#         msg = bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞ –±–æ—Ç–∞ 1")

def equipment_inputid_handler(m): 
    if is_blocked_chat(m.chat.id) : return
    if is_canceled(m):
        return handler_cancel(m)
    if not is_int(m.text):
        msg = bot.send_message(m.chat.id, f"–í—ã–≤–æ–¥–∏–º –∫–∞—Ä—Ç–æ—á–∫—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è... –í–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –Ω–æ–º–µ—Ä–æ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä 767. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel")
        bot.register_next_step_handler(msg, equipment_inputid_handler)
        return

    id = int(m.text)
    eq = get_equipment.get_equipment(id)
    id = eq["id"]
    equipment = eq["equipment"]
    parametr = eq["parametr"]
    note = eq["note"]
    strmessage = f"–í—ã–≤–æ–¥–∏–º –∫–∞—Ä—Ç–æ—á–∫—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:\n–ù–ê–ó–í–ê–ù–ò–ï –û–ë–û–†–£–î–û–í–ê–ù–ò–Ø: {equipment} \n–ü–ê–†–ê–ú–ï–¢–†–´: {parametr} \n–û–ü–ò–°–ê–ù–ò–ï: {note}"
    msg = bot.send_message(m.chat.id, strmessage)
    bot.register_next_step_handler(msg, equipment_inputid_handler)

def room_inputroom_handler(m):
    if is_blocked_chat(m.chat.id) : return
    if is_canceled(m):
        return handler_cancel(m)
    if not is_int(m.text) :
        msg = bot.send_message(m.chat.id, "–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –ø–æ –Ω–æ–º–µ—Ä—É –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–Ω–æ–π. –í–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –Ω–æ–º–µ—Ä –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–Ω–æ–π. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel")
        bot.register_next_step_handler(msg, room_inputroom_handler)
        return
   
    room = int(m.text)
    eqs = get_equipment.get_room(room)
    strmessage=''
    for eq in eqs:
        id = eq["id"]
        equipment = eq["equipment"]
        strmessage = strmessage + f"{id}: {equipment}\n"
    msg = bot.send_message(m.chat.id, strmessage)
    bot.register_next_step_handler(msg, room_inputroom_handler)

def docs_inputid_handler(m): 
    if is_blocked_chat(m.chat.id): return
    if is_canceled(m): return handler_cancel(m)

    if not is_int(m.text) :
        msg = bot.send_message(m.chat.id, "–í—ã–≤–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ –Ω–æ–º–µ—Ä—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è. –í–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –Ω–æ–º–µ—Ä–æ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel")
        bot.register_next_step_handler(msg, docs_inputid_handler)
        return

    id = int(m.text)
    listfiles = get_equipment.get_listfiles(id)
    print(f'{listfiles=}')
    if listfiles == None or len(listfiles) == 0 :
        msg = bot.send_message(m.chat.id, f"–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é ‚Ññ{id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")    
        bot.register_next_step_handler(msg, docs_inputid_handler)
        return

    # –¥–ª—è –∫–∞–∂–¥–æ–≥–æ chat_id —Ö—Ä–∞–Ω—Ç—Å—è –ø–∞—Ä–∞ (equipment_id –∏ —Å–ø–∏—Å–æ–∫ –ø–∞—Ä(–∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞, –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞))
    # number - –∏–Ω–¥–µ–∫—Å —Ñ–∞–π–ª–∞ –≤ —Å–ø–∏—Å–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    newlist = list(map(lambda item: (item[0], item[1]), listfiles.items()))
    chat_states[m.chat.id] = (id, newlist)

    # –≤—ã–≤–µ—Å—Ç–∏ —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ "number1: filename1[\n]number2: filename2..."
    strnumberkeys = "\n".join(f"{number}: {pair[0]}" for number, pair in enumerate(newlist))
    strmessage = f"{strnumberkeys}"
    msg = bot.send_message(m.chat.id, strmessage)
    msg = bot.send_message(m.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞")
    bot.register_next_step_handler(msg, file_inputnumber_handler)

def file_inputnumber_handler(m) -> None: 
    if is_blocked_chat(m.chat.id) : return
    if is_canceled(m):
        return handler_cancel(m)

    (id, newlist) = chat_states.get(m.chat.id)

    if not is_int(m.text) :
        msg = bot.send_message(m.chat.id, f"–ó–∞–ø—Ä–æ—Å —Ñ–∞–π–ª–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è ‚Ññ{id}. –í–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel")
        bot.register_next_step_handler(msg, file_inputnumber_handler)
        return

    number = int(m.text)
    if number < 0 or number >= len(newlist):
        msg = bot.send_message(m.chat.id, f"–ó–∞–ø—Ä–æ—Å —Ñ–∞–π–ª–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è ‚Ññ{id}. –í–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ {len(listfiles) - 1}.–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel")
        bot.register_next_step_handler(msg, file_inputnumber_handler)
        return

    pair = newlist[number]
    shortfilename = pair[0]    
    fullfilename = pair[1]

    strmessage = f"–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–∞–π–ª {number}: {shortfilename} –¥–ª—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è ‚Ññ{id}"
    msg = bot.send_message(m.chat.id, strmessage)
    
    file = get_equipment.get_file(fullfilename)

    print(f'{m.chat.id} –ü–æ–ø—ã—Ç–∫–∞ —Å–∫–∞—á–∞—Ç—å {id=} —Ñ–∞–π–ª ‚Ññ{number} {shortfilename} –ø–æ –∞–¥—Ä–µ—Å—É {fullfilename}')
    if file == None or not file.ok:
        msg = bot.send_message(m.chat.id, f"–§–∞–π–ª {number} –¥–ª—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è ‚Ññ{id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")    
        bot.register_next_step_handler(msg, file_inputnumber_handler)
        return

    strmessage = f"–ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —Ñ–∞–π–ª {number} –¥–ª—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è ‚Ññ{id}"
    msg = bot.send_message(m.chat.id, strmessage)

    msg = bot.send_document(m.chat.id, file.content, caption=shortfilename)
    #msg = bot.send_document(m.chat.id, file.content, caption="qqq.jpg")
    bot.register_next_step_handler(msg, file_inputnumber_handler)


@bot.message_handler(content_types=["text"])
def handle_text_default(m):
    if is_blocked_chat(m.chat.id) : return
    print(f'message.chat.id={m.chat.id} {m.from_user.username} message_handler. You write {m.text}')
    bot.send_message(m.chat.id, '–î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ö–æ–ª–æ–¥–∏–ª—å–Ω—ã–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º –í–õ–ú–ö –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –∫–æ–º–∞–Ω–¥: \n/id - –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ –Ω–æ–º–µ—Ä—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è \n/room - —Å–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –ø–æ –Ω–æ–º–µ—Ä—É –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–Ω–æ–π \n/docs - –≤—ã–≤–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ –Ω–æ–º–µ—Ä—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è \n/file - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ –Ω–æ–º–µ—Ä—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è \n/help - –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è \n/cancel - –æ—Ç–º–µ–Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã \n/test - —Ç–æ–∂–µ –¥–ª—è —á–µ–≥–æ-—Ç–æ')

def main():
    print("bot starting")
    bot.polling(none_stop=True, interval=0)

if __name__ == "__main__":
    main()